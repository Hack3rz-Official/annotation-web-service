version: '3.8'

services:

  demo-frontend:
    build: ./demo-frontend
    container_name: "demo-frontend"
    image: demo-frontend:latest
    env_file:
      - .env
    environment:
      - VITE_API_URL=http://web-api:${WEB_API_PORT}
    ports: 
      - "${DEMO_FRONTEND_PORT}:8080"
    depends_on:
      - web-api
    networks:
      - aws-network

  web-api:
    build: ./web-api
    container_name: "web-api"
    image: web-api:latest
    command: npm run start:prod
    env_file:
        - .env
    environment:
      - LEX_URL=http://nginx:4000/api/annotate
      - PREDICT_URL=http://nginx:4000/api/v1/prediction
    ports:
      - "${WEB_API_PORT}:${WEB_API_PORT}"
    depends_on:
      - nginx
      - annotation
    networks:
      - aws-network
    restart: unless-stopped

  swagger-ui:
    container_name: "swagger-ui"
    image: swaggerapi/swagger-ui
    volumes:
      - ./training-service/api-doc.yaml:/usr/share/nginx/html/training-service.yaml
      - ./prediction-service/api-doc.yaml:/usr/share/nginx/html/prediction-service.yaml
    env_file:
        - .env
    environment:
      URLS: "[
          { url: \"training-service.yaml\", name: \"Training Service\" },
          { url: \"prediction-service.yaml\", name: \"Prediction Service\" },
        ]"
    ports:
      - "${SWAGGER_UI_PORT}:8080"
    depends_on:
      - training
      - prediction
    networks:
      - aws-network
    restart: always

  annotation:
    build: ./annotation-service
    # container_name: "annotation-service"
    image: annotation-service:latest
    env_file:
      - .env
    expose:
      - "${ANNOTATION_SERVICE_PORT}"
    depends_on:
      - mongodb
    networks:
      - aws-network
    restart: unless-stopped

  prediction:
    build: ./prediction-service
    # container_name: "prediction-service"
    image: prediction-service:latest
    env_file:
      - .env
    expose:
      - "${PREDICTION_SERVICE_PORT}"
    depends_on:
      - mongodb
    networks:
      - aws-network
    restart: unless-stopped

  training:
    build: ./training-service
    container_name: "training-service"
    image: training-service:latest
    env_file:
      - .env
    ports:
    # todo: use "expose" instead of ports, so port is not exposed to public via host
      - "6061:6061"
    networks:
      - aws-network
    depends_on:
      - prediction
      - mongodb
    restart: unless-stopped

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf.template:/etc/nginx/templates/nginx.conf.template
    depends_on:
      - annotation
      - prediction
    environment:
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx
    env_file:
      - .env
    networks:
      - aws-network
    # todo: use "expose" instead of ports, so port is not exposed to public via host
    ports:
      - "4000:4000"
    restart: unless-stopped
    
  mongodb:
    image: mongo:5.0.6
    container_name: MongoDB
    environment:
      - PUID=1000
      - PGID=1000
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    env_file:
      - .env
    volumes:
      - ./data:/data/db
      - ./mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh:ro
    # since this DB is also used during test runs in GitHub CI, port is exposed on host machine
    ports:
      - "27017:${MONGO_PORT}"
    networks:
      - aws-network
    restart: unless-stopped

networks:
  aws-network: